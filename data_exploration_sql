-- To combine and clean the datat I decided to use SQL on the Google BigQuery platform. I saved the last 12 months of data in CSV files and created a data set in 
Big QUery. I then joined all data tables into a combined table entitled cycle_data_yearly_combined.  I'm using the Union ALL in order to keep all the rows from the 
specified data. 


CREATE TABLE `airy-aria-383618.cycle_data_yearly.combined_data` AS
SELECT *
FROM (
  SELECT * FROM `airy-aria-383618.cycle_data_yearly.april_2022_data`
  UNION ALL
  SELECT * FROM `airy-aria-383618.cycle_data_yearly.may_2022_data`
  UNION ALL
  SELECT * FROM `airy-aria-383618.cycle_data_yearly.may_1_2022_data`
  UNION ALL
  SELECT * FROM `airy-aria-383618.cycle_data_yearly.june_2022_data`
  UNION ALL
  SELECT * FROM `airy-aria-383618.cycle_data_yearly.june_1_2022_data`
  UNION ALL
  SELECT * FROM `airy-aria-383618.cycle_data_yearly.july_2022_data`
  UNION ALL  
  SELECT * FROM `airy-aria-383618.cycle_data_yearly.august_2022_data`
  UNION ALL
  SELECT * FROM `airy-aria-383618.cycle_data_yearly.august_1_2022_data`
  UNION ALL
  SELECT * FROM `airy-aria-383618.cycle_data_yearly.september_2022_data`
  UNION ALL
  SELECT * FROM `airy-aria-383618.cycle_data_yearly.september_1_2022_data`
  UNION ALL
  SELECT * FROM `airy-aria-383618.cycle_data_yearly.october_2022_data`
  UNION ALL
  SELECT * FROM `airy-aria-383618.cycle_data_yearly.november_2022_data`
  UNION ALL
  SELECT * FROM `airy-aria-383618.cycle_data_yearly.december_2022_data`
  UNION ALL
  SELECT * FROM `airy-aria-383618.cycle_data_yearly.january_2023_data`
  UNION ALL
  SELECT * FROM `airy-aria-383618.cycle_data_yearly.february_2023_data`
  UNION ALL
  SELECT * FROM `airy-aria-383618.cycle_data_yearly.march_2023_data`
)

-- The created table is a total of 5,285,951 rows. Previewing my data I noticed right away there are many null values that need to be cleaned, as well as a column 
that needs to be removed. I will proceed to check out each column to see what issues are and what need to be cleaned.--

--Looking at the ride_id column, I want to count the number of user id, the number of distinct user ids and the number of null values using this SQL code.

SELECT 
  COUNT (ride_id) AS all_ride_ids,
  COUNT(DISTINCT ride_id) AS distinct_ride_ids,
  COUNTIF(ride_id IS NULL) AS null_ride_ids

FROM `airy-aria-383618.cycle_data_yearly.combined_data`

--This gave gave me 1,502 more ride_id values than distinct ride_id values and 89 null values. This will need to be addressed during cleaning.--

--Looking at the rideable_type column, I want to make sure it only has either of 3 values; classic_bike, docked_bike, and electric_bike--

SELECT DISTINCT rideable_type

From `airy-aria-383618.cycle_data_yearly.combined_data`

--returned 4 values; Null, classic_bike, docked_bike, and electric_bike. I then checked how many null values with the following code and found 88 null values--

SELECT COUNT (*) AS null_count
FROM `airy-aria-383618.cycle_data_yearly.combined_data`
WHERE rideable_type IS NULL;

--For the next 2 columns, started_at and ended_at, I checked to see that they are datetime format.  I used SQL to identify they were all in the correct format and by
returning NULL if they were incorrect and found 88 NULL values--

SELECT
  started_at,
  DATETIME(started_at) AS parsed_started_at,
  ended_at,
  DATETIME(ended_at) AS parsed_ended_at,

FROM
  `airy-aria-383618.cycle_data_yearly.combined_data`;

SELECT COUNTIF(started_at IS NULL) AS null_count
FROM `airy-aria-383618.cycle_data_yearly.combined_data`
--I then counted the number of actual null values, 88, to determine that they are all correctly formatted with 88 null values--

SELECT 
  COUNTIF(started_at IS NULL) AS null_started_at_count,
  COUNTIF(ended_at IS NULL) AS null_ended_at_count,
FROM `airy-aria-383618.cycle_data_yearly.combined_data`

--My understanding is that no ride times should be under 1 minute or over 1 day, I want to check and see if those values exist--

SELECT *
FROM `airy-aria-383618.cycle_data_yearly.combined_data`
WHERE TIMESTAMP_DIFF(ended_at, started_at, MINUTE) <1
OR TIMESTAMP_DIFF(ended_at, started_at, MINUTE) >1440

--Found 74,613 instances of <1 minute or >1 day. These will be removed during cleaning--

--For start_station_name there are 704,020 null values, end_station_name there are 715,834. These will likely be removed for cleaning based on the assumption that
each ride MUST have a start and end station to be a valid ride--

SELECT COUNTIF(start_station_name IS NULL) AS start_null_count,
      COUNTIF(end_station_name IS NULL) AS end_null_count

FROM `airy-aria-383618.cycle_data_yearly.combined_data`

--For start_station_id there are 704,152 null values and end_station_id there are 715,975 values. Right now I don't see these columns adding value to the questions
being asked by the share holders, so we will think about how to proceed with these columns--
	
SELECT COUNTIF(start_station_id IS NULL) as null_count_start,
    COUNTIF(end_station_id IS NULL) as null_count_end

FROM `airy-aria-383618.cycle_data_yearly.combined_data`

--The start_lat, start_lng, end_lat and end_lng will be important data to have for visualization purposes, all instances (9,734) will be removed--

SELECT COUNTIF(start_lat IS NULL) as null_lat_start,
    COUNTIF(start_lng IS NULL) as null_lng_start,
    COUNTIF(end_lat IS NULL) as null_lat_end,
    COUNTIF(end_lng IS NULL) as null_lng_end

FROM `airy-aria-383618.cycle_data_yearly.combined_data`

--The member_casual column is imperative data to this analysis, I checked , this column to ensure there are no null values as well as it only contained one of the 
two values.  There are 88 null values which will be deleted, all other values are "member" or "casual" --

SELECT COUNT(*)
FROM `airy-aria-383618.cycle_data_yearly.combined_data`
WHERE member_casual IS NULL;

SELECT COUNT(*)
FROM `airy-aria-383618.cycle_data_yearly.combined_data`
WHERE member_casual IS NOT NULL
  AND member_casual NOT LIKE 'member'
  AND member_casual NOT LIKE 'casual';
  
  --string field 13 columns is not need and will be deleted for the final table--
  
  --ride_length and day_of_week colums were two columns that I added when playing around the data after downloading it.  88 null values in ride_length and day_0f_week
  which will be deleted, I've already checked th ride length so see if the values and <1 minute and over 1 day, i checked the remaining columns in day_of_week to make
  sure there contain only values 1 to 7.--
  
  SELECT COUNT(*)
FROM `airy-aria-383618.cycle_data_yearly.combined_data`
WHERE ride_length IS NULL;

SELECT COUNT(*)
FROM `airy-aria-383618.cycle_data_yearly.combined_data`
WHERE day_of_week  IS NULL;

SELECT COUNT(*)
FROM `airy-aria-383618.cycle_data_yearly.combined_data`
WHERE day_of_week IS NOT NULL
  AND day_of_week NOT BETWEEN 1 AND 7;
  
  


